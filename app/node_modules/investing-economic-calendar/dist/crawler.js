"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchEconomicEvents = void 0;
const crawler_1 = __importDefault(require("crawler"));
const qs_1 = __importDefault(require("qs"));
const Importance_1 = require("./models/Importance");
const newsCrawler = new crawler_1.default({
    maxConnections: 1,
    retries: 1,
    retryTimeout: 1000,
});
const INVESTING_URL = 'https://sslecal2.investing.com/';
/**
 * Generate the url for the Investing economic calendar widget.
 * @param {InvestingParams} params - Parameters to send to the widget
 * @returns {string} - The url generated
 */
function generateUrl(params) {
    const query = qs_1.default.stringify(params, { arrayFormat: 'comma' });
    return `${INVESTING_URL}?${query}`;
}
/**
 * Extract one event from the widget
 * @param {cheerio.CheerioAPI} $ - Cheerio instance
 * @param {cheerio.Element} tr - HTML tr element
 * @returns {EconomicEvent} - One event
 */
function extractOneEventFromWidget($, tr) {
    const event = {
        actual: null,
        forecast: null,
        previous: null,
    };
    $(tr).children('td').each((index, td) => {
        if ($(td).hasClass('first left time')) {
            event.time = $(td).text().trim();
        }
        if ($(td).hasClass('left event')) {
            event.name = $(td).text().trim();
        }
        if ($(td).hasClass('flagCur')) {
            event.country = $(td).children('span').first().attr('title') || '';
            event.currency = $(td).text().trim();
        }
        if ($(td).hasClass('sentiment')) {
            if ($(td).children().length === 3) {
                event.importance = Importance_1.Importance.HIGH;
            }
            if ($(td).children().length === 2) {
                event.importance = Importance_1.Importance.MEDIUM;
            }
            if ($(td).children().length === 1) {
                event.importance = Importance_1.Importance.LOW;
            }
        }
        if ($(td).hasClass('act')) {
            if ($(td).text().trim().length > 0) {
                event.actual = $(td).text().trim();
            }
        }
        if ($(td).hasClass('fore')) {
            if ($(td).text().trim().length > 0) {
                event.forecast = $(td).text().trim();
            }
        }
        if ($(td).hasClass('prev')) {
            if ($(td).text().trim().length > 0) {
                event.previous = $(td).text().trim();
            }
        }
    });
    return event;
}
/**
 * Extract events from the widget
 * @param {cheerio.CheerioAPI} $ - Cheerio instance
 * @returns {EconomicEvent[]} - Array with all events extracted
 */
function extractEventsFromWidget($) {
    const events = [];
    let day = 0;
    $('#ecEventsTable').children().last().children('tr').each((index, event) => {
        if (!$(event).attr('class')) {
            $(event).children('td').each((i, td) => {
                if ($(td).attr('class')?.includes('theDay')) {
                    ++day;
                }
            });
        }
    });
    if (day > 1) {
        return [];
    }
    $('#ecEventsTable').children().last().children('tr').each((index, event) => {
        if ($(event).attr('id')?.includes('eventRowId')) {
            events.push(extractOneEventFromWidget($, event));
        }
    });
    return events;
}
/**
 * Extract events from the widget
 * @param {InvestingParams} params - Parameters to send to the widget
 * @returns {EconomicEvent[]} - Array with all events extracted
 */
function fetchEconomicEvents(params) {
    return new Promise((resolve, reject) => {
        newsCrawler.queue({
            uri: generateUrl(params),
            callback: (err, res, doneCrawler) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(extractEventsFromWidget(res.$));
                }
                doneCrawler();
            },
        });
    });
}
exports.fetchEconomicEvents = fetchEconomicEvents;
