"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioMenu = void 0;
var const_1 = require("../const");
var generic_menu_1 = require("../generic-menu");
var RadioMenu = (function (_super) {
    __extends(RadioMenu, _super);
    function RadioMenu(config) {
        var _a;
        var _this = _super.call(this, __assign(__assign({}, config), { formatting: Object.assign(const_1.FORMATTING_EMOJIS.RADIO_FORMATTING, (_a = config.formatting) !== null && _a !== void 0 ? _a : {}) })) || this;
        _this.config = config;
        return _this;
    }
    RadioMenu.prototype.stateToMenu = function (state) {
        var allButtons = this.flatFilters;
        var newButtons = [];
        var currentButton = allButtons.find(function (button) { return button.value === state; });
        newButtons.push(currentButton);
        return newButtons.filter(Boolean);
    };
    RadioMenu.prototype.menuToState = function (menu) {
        return menu[0];
    };
    RadioMenu.prototype.onActiveButton = function (ctx, activeButton) {
        var activeButtons = [activeButton.value];
        _super.prototype.toggleActiveButton.call(this, ctx, activeButtons);
    };
    RadioMenu.prototype.formatButtonLabel = function (ctx, button) {
        var _a = _super.prototype.getButtonLabelInfo.call(this, ctx, button), label = _a.label, isDefaultActiveButton = _a.isDefaultActiveButton, isActiveButton = _a.isActiveButton;
        var activeButtonIndex = this.flatFilters.findIndex(function (allButton) { return button.value === allButton.value; });
        var firstButtonIndex = this.flatFilters.findIndex(function (allButton) { return allButton.isDefault; });
        var isFirstDefault = firstButtonIndex === activeButtonIndex;
        return isActiveButton || (isDefaultActiveButton && isFirstDefault) ?
            this.genericConfig.formatting.active + ' ' + label :
            this.genericConfig.formatting.disabled + ' ' + label;
    };
    return RadioMenu;
}(generic_menu_1.GenericMenu));
exports.RadioMenu = RadioMenu;
//# sourceMappingURL=radio.menu.js.map