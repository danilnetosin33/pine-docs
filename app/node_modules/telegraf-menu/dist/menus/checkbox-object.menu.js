"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckboxObjectMenu = void 0;
var const_1 = require("../const");
var checkbox_menu_1 = require("./checkbox.menu");
var CheckboxObjectMenu = (function (_super) {
    __extends(CheckboxObjectMenu, _super);
    function CheckboxObjectMenu(config) {
        var _a;
        return _super.call(this, __assign(__assign({}, config), { formatting: Object.assign(const_1.FORMATTING_EMOJIS.CHECKBOX_FORMATTING, (_a = config.formatting) !== null && _a !== void 0 ? _a : {}) })) || this;
    }
    CheckboxObjectMenu.prototype.stateToMenu = function (state) {
        var _this = this;
        var allButtons = this.flatFilters;
        var newButtons = [];
        var currentState = state !== null && state !== void 0 ? state : {};
        var currentStateKeys = Object.keys(currentState);
        var checkboxButton = allButtons
            .filter(function (button) {
            var isItemSelected = currentStateKeys.includes(button.value);
            return _this.genericConfig.invertedSelection ? !isItemSelected : isItemSelected;
        });
        newButtons.push.apply(newButtons, checkboxButton);
        return newButtons.filter(Boolean);
    };
    CheckboxObjectMenu.prototype.menuToState = function (menu) {
        var state = {};
        if (this.genericConfig.invertedSelection) {
            this.flatFilters
                .filter(function (button) { return !menu.includes(button.value); })
                .map(function (button) { return button.value; })
                .forEach(function (button) { return state[button] = true; });
        }
        else {
            menu.forEach(function (button) { return state[button] = true; });
        }
        return state;
    };
    return CheckboxObjectMenu;
}(checkbox_menu_1.CheckboxMenu));
exports.CheckboxObjectMenu = CheckboxObjectMenu;
//# sourceMappingURL=checkbox-object.menu.js.map