"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RangeMenu = void 0;
var const_1 = require("../const");
var generic_menu_1 = require("../generic-menu");
var RangeMenu = (function (_super) {
    __extends(RangeMenu, _super);
    function RangeMenu(config) {
        var _a;
        var _this = _super.call(this, __assign(__assign({}, config), { formatting: Object.assign(const_1.FORMATTING_EMOJIS.RANGE_FORMATTING, (_a = config.formatting) !== null && _a !== void 0 ? _a : {}) })) || this;
        _this.config = config;
        return _this;
    }
    RangeMenu.prototype.stateToMenu = function (state) {
        var allButtons = this.flatFilters;
        var newButtons = allButtons.filter(function (button) {
            return state.from === button.value || state.to === button.value;
        });
        return newButtons.filter(Boolean);
    };
    RangeMenu.prototype.menuToState = function (menu) {
        var newState = {
            from: menu[0],
            to: menu[1],
        };
        if (!newState.from && +newState.from !== 0) {
            delete newState.from;
        }
        if (!newState.to && +newState.to !== 0) {
            delete newState.to;
        }
        Object.keys(newState).forEach(function (key) {
            var value = newState[key];
            if (!value && value !== 0) {
                delete newState[key];
            }
        });
        return newState;
    };
    RangeMenu.prototype.onActiveButton = function (ctx, activeButton) {
        var _a = this.getRangeButtonIndexes(activeButton), activeButtonIndex = _a.activeButtonIndex, firstButtonIndex = _a.firstButtonIndex, lastButtonIndex = _a.lastButtonIndex, firstButton = _a.firstButton, lastButton = _a.lastButton;
        var activeButtons = this.evenRange
            ? [firstButton, activeButton.value]
            : [activeButton.value, lastButton];
        activeButtons = activeButtons.filter(Boolean);
        if (this.evenRange && activeButtonIndex < firstButtonIndex || !this.evenRange && activeButtonIndex > lastButtonIndex) {
            activeButtons = activeButtons.reverse();
            this.evenRange = !this.evenRange;
        }
        _super.prototype.toggleActiveButton.call(this, ctx, activeButtons);
    };
    RangeMenu.prototype.formatButtonLabel = function (ctx, button) {
        var _a = this.getButtonLabelInfo(ctx, button), label = _a.label, isDefaultActiveButton = _a.isDefaultActiveButton, isActiveButton = _a.isActiveButton;
        var _b = this.getRangeButtonIndexes(button), activeButtonIndex = _b.activeButtonIndex, firstButtonIndex = _b.firstButtonIndex, lastButtonIndex = _b.lastButtonIndex;
        var isButtonInRange = activeButtonIndex >= firstButtonIndex && activeButtonIndex <= lastButtonIndex;
        var isCurrentButton = this.evenRange && activeButtonIndex === lastButtonIndex ||
            !this.evenRange && activeButtonIndex === firstButtonIndex;
        if (isCurrentButton) {
            return this.genericConfig.formatting.current + ' ' + label;
        }
        return isActiveButton || isButtonInRange || isDefaultActiveButton ?
            this.genericConfig.formatting.active + ' ' + label :
            this.genericConfig.formatting.disabled + ' ' + label;
    };
    RangeMenu.prototype.getRangeButtonIndexes = function (currentButton) {
        var allButtons = this.flatFilters;
        var firstButton = this.activeButtons[0];
        var lastButton = this.activeButtons[1];
        var firstDefault = allButtons.findIndex(function (button) { return !!button.isDefault; });
        var activeButtonIndex = allButtons
            .findIndex(function (button) { return button.value === currentButton.value; });
        var firstButtonIndex = allButtons
            .findIndex(function (button) {
            return firstButton
                ? button.value === firstButton
                : !!button.isDefault;
        });
        var lastButtonIndex = allButtons
            .findIndex(function (button, index) {
            return lastButton
                ? button.value === lastButton
                : !!button.isDefault && firstDefault !== index;
        });
        return {
            firstButton: firstButton || allButtons[firstButtonIndex].value,
            lastButton: lastButton || allButtons[lastButtonIndex].value,
            activeButtonIndex: activeButtonIndex,
            firstButtonIndex: firstButtonIndex,
            lastButtonIndex: lastButtonIndex,
        };
    };
    return RangeMenu;
}(generic_menu_1.GenericMenu));
exports.RangeMenu = RangeMenu;
//# sourceMappingURL=range.menu.js.map