import { MiddlewareFn } from 'telegraf';
import { DefaultCtx, GenericConfig, GenericState, MenuContextUpdate, MenuFilters, MenuOption, MenuOptionShort } from './interfaces';
import { KeyboardButton } from './keyboard-button';
export declare abstract class GenericMenu<TCtx extends DefaultCtx = DefaultCtx, TState extends GenericState = GenericState, TValue extends string = string> {
    genericConfig: GenericConfig<TCtx, TState>;
    private get debugMessage();
    messageId: number;
    state: TState;
    replaced: boolean;
    protected activeButtons: TValue[];
    protected evenRange: boolean;
    private deleted;
    static remapCompactToFull<SValue>(options: MenuOptionShort<SValue>): MenuOption<SValue>;
    static remapFullToCompact<SValue>(options: MenuOption<SValue>): MenuOptionShort<SValue>;
    static middleware(): MiddlewareFn<DefaultCtx>;
    static onAction<TCtx extends DefaultCtx = DefaultCtx>(menuGetter: (ctx: TCtx) => GenericMenu, initMenu: (ctx: TCtx) => any): (ctx: MenuContextUpdate<TCtx>) => void;
    constructor(genericConfig: GenericConfig<TCtx, TState>);
    abstract onActiveButton(ctx: TCtx, activeButton: MenuOption<TValue>): any;
    abstract formatButtonLabel(ctx: TCtx, button: KeyboardButton<TValue>): any;
    abstract stateToMenu(state: TState): KeyboardButton<TValue>[];
    abstract menuToState(menu: TValue[]): any;
    get flatFilters(): MenuFilters<TValue>;
    updateState(state: TState, ctx?: TCtx): void;
    sendMenu(ctx: TCtx): Promise<void>;
    destroyMenu(ctx: TCtx): Promise<true>;
    protected toggleActiveButton(ctx: TCtx, activeButtons: TValue[]): void;
    protected getButtonLabelInfo(ctx: TCtx, button: KeyboardButton<TValue>): {
        label: string;
        isActiveButton: boolean;
        isDefaultActiveButton: boolean;
    };
    private getMessage;
    private getSubmitMessage;
    private onAction;
    private redrawMenu;
    private getKeyboard;
}
