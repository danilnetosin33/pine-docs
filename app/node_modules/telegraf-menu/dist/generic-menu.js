"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericMenu = void 0;
var telegraf_1 = require("telegraf");
var parse_callback_data_1 = require("./middlewares/parse-callback-data");
var utils_1 = require("./utils");
var GenericMenu = (function () {
    function GenericMenu(genericConfig) {
        this.genericConfig = genericConfig;
        this.replaced = false;
        this.activeButtons = [];
        this.evenRange = false;
        this.deleted = false;
        if (genericConfig.state) {
            this.updateState(genericConfig.state);
        }
    }
    Object.defineProperty(GenericMenu.prototype, "debugMessage", {
        get: function () {
            return !!this.genericConfig.debug ?
                '\n\n• Debug: ' + JSON.stringify(this.state) + '\n• Message ID: ' + this.messageId :
                '';
        },
        enumerable: false,
        configurable: true
    });
    GenericMenu.remapCompactToFull = function (options) {
        var newOption = {
            action: options.a,
            value: options.v,
            isDefault: !!options.d,
        };
        if (!options.d) {
            delete newOption.isDefault;
        }
        return newOption;
    };
    GenericMenu.remapFullToCompact = function (options) {
        var newOption = {
            a: options.action,
            v: options === null || options === void 0 ? void 0 : options.value,
            d: Number(!!(options === null || options === void 0 ? void 0 : options.isDefault)),
        };
        if (!(options === null || options === void 0 ? void 0 : options.isDefault)) {
            delete newOption.d;
        }
        return newOption;
    };
    GenericMenu.middleware = function () {
        return parse_callback_data_1.parseCallbackData;
    };
    GenericMenu.onAction = function (menuGetter, initMenu) {
        return function (ctx) {
            var oldMenu = menuGetter(ctx);
            if (oldMenu === null || oldMenu === void 0 ? void 0 : oldMenu.onAction) {
                oldMenu.onAction(ctx);
            }
            else {
                if (oldMenu && !oldMenu.deleted) {
                    ctx.deleteMessage(oldMenu.messageId).catch(function () { });
                    oldMenu.deleted = true;
                }
                initMenu(ctx);
            }
        };
    };
    Object.defineProperty(GenericMenu.prototype, "flatFilters", {
        get: function () {
            return Array.isArray(this.genericConfig.filters[0])
                ? this.genericConfig.filters.reduce(utils_1.reduceArray)
                : this.genericConfig.filters;
        },
        enumerable: false,
        configurable: true
    });
    GenericMenu.prototype.updateState = function (state, ctx) {
        this.activeButtons = this.stateToMenu(state).map(function (button) { return button.value; });
        this.state = state;
        if (ctx) {
            this.redrawMenu(ctx);
        }
    };
    GenericMenu.prototype.sendMenu = function (ctx) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var chatId, sendMessage, oldMenu, isReplacingMenu;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        chatId = utils_1.getCtxInfo(ctx).chatId;
                        ctx.telegram.sendChatAction(chatId, 'typing');
                        sendMessage = function () { return __awaiter(_this, void 0, void 0, function () {
                            var sentMessage;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, ctx.reply(this.getMessage(ctx), this.getKeyboard(ctx))];
                                    case 1:
                                        sentMessage = _a.sent();
                                        this.messageId = sentMessage.message_id;
                                        return [2];
                                }
                            });
                        }); };
                        oldMenu = this.genericConfig.menuGetter(ctx);
                        isReplacingMenu = false;
                        if (oldMenu) {
                            isReplacingMenu = ((_a = oldMenu.genericConfig) === null || _a === void 0 ? void 0 : _a.replaceable) && !oldMenu.deleted && oldMenu.messageId !== this.messageId;
                            oldMenu.replaced = true;
                        }
                        if (!(isReplacingMenu && oldMenu.onAction)) return [3, 1];
                        this.messageId = oldMenu.messageId;
                        ctx.telegram.editMessageText(chatId, this.messageId, null, this.getMessage(ctx), this.getKeyboard(ctx))
                            .then(function () {
                            if (_this.genericConfig.debug) {
                                console.log('sendMenu', _this.genericConfig.action);
                            }
                        })
                            .catch(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        oldMenu.deleted = true;
                                        return [4, sendMessage()];
                                    case 1:
                                        _a.sent();
                                        return [2];
                                }
                            });
                        }); });
                        return [3, 3];
                    case 1:
                        ctx.deleteMessage(this.messageId).catch(function () { });
                        return [4, sendMessage()];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        (_c = (_b = this.genericConfig).menuSetter) === null || _c === void 0 ? void 0 : _c.call(_b, ctx, this);
                        return [2];
                }
            });
        });
    };
    GenericMenu.prototype.destroyMenu = function (ctx) {
        this.deleted = true;
        return ctx.deleteMessage(this.messageId);
    };
    GenericMenu.prototype.toggleActiveButton = function (ctx, activeButtons) {
        var _a, _b;
        var newState = this.menuToState(activeButtons);
        this.activeButtons = activeButtons;
        this.state = newState;
        this.evenRange = !this.evenRange;
        (_b = (_a = this.genericConfig).beforeChange) === null || _b === void 0 ? void 0 : _b.call(_a, ctx, this.state);
        this.redrawMenu(ctx);
    };
    GenericMenu.prototype.getButtonLabelInfo = function (ctx, button) {
        var _a;
        var isDefaultActiveButton = this.activeButtons
            .length === 0 && !!button.isDefault;
        var isActiveButton = this.activeButtons.some(function (activeButton) {
            return activeButton === button.value;
        });
        var label = ((_a = ctx.i18n) === null || _a === void 0 ? void 0 : _a.t(button.label)) || button.label;
        return {
            label: label,
            isActiveButton: isActiveButton,
            isDefaultActiveButton: isDefaultActiveButton,
        };
    };
    GenericMenu.prototype.getMessage = function (ctx) {
        var _a;
        var message = ((_a = ctx.i18n) === null || _a === void 0 ? void 0 : _a.t(this.genericConfig.message)) || this.genericConfig.message;
        return message + this.debugMessage;
    };
    GenericMenu.prototype.getSubmitMessage = function (ctx) {
        var _a;
        return ((_a = ctx.i18n) === null || _a === void 0 ? void 0 : _a.t(this.genericConfig.submitMessage)) || this.genericConfig.submitMessage || 'Submit';
    };
    GenericMenu.prototype.onAction = function (ctx) {
        var _a, _b, _c, _d, _e, _f;
        if (!ctx.state.callbackData) {
            throw new Error('TelegrafMenu Error: You forgot to add middleware parser. Add following code to your bot:\n\n+++ bot.use(GenericMenu.middleware());\n');
        }
        var messageId = (_b = (_a = ctx.callbackQuery) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.message_id;
        if (!this.messageId) {
            ctx.deleteMessage(messageId).catch(function () { });
            this.sendMenu(ctx);
        }
        else if (this.messageId !== messageId) {
            ctx.deleteMessage(messageId).catch(function () { });
            return;
        }
        var payloadButton = ctx.state.callbackData;
        if ((payloadButton === null || payloadButton === void 0 ? void 0 : payloadButton.value) === '_local_submit') {
            (_d = (_c = this.genericConfig).onSubmit) === null || _d === void 0 ? void 0 : _d.call(_c, ctx, this.state);
            this.deleted = true;
            if (this.genericConfig.onSubmitUpdater) {
                this.genericConfig.onSubmitUpdater(ctx, messageId, this.state);
            }
            else if (!this.genericConfig.replaceable) {
                ctx.deleteMessage(messageId).catch(function () { });
            }
            return;
        }
        this.onActiveButton(ctx, ctx.state.callbackData);
        (_f = (_e = this.genericConfig).onChange) === null || _f === void 0 ? void 0 : _f.call(_e, ctx, this.state);
    };
    GenericMenu.prototype.redrawMenu = function (ctx) {
        var _this = this;
        var chatId = utils_1.getCtxInfo(ctx).chatId;
        setTimeout(function () {
            if (_this.replaced) {
                return;
            }
            if (_this.messageId) {
                ctx.telegram
                    .editMessageText(chatId, _this.messageId, null, _this.getMessage(ctx), _this.getKeyboard(ctx))
                    .then(function () {
                    if (_this.genericConfig.debug) {
                        console.log('redraw', _this.genericConfig.action);
                    }
                })
                    .catch(function (e) {
                    console.log(e);
                });
            }
        });
    };
    GenericMenu.prototype.getKeyboard = function (ctx) {
        var _this = this;
        var filters = Array.isArray(this.genericConfig.filters[0])
            ? this.genericConfig.filters :
            [this.genericConfig.filters];
        var buttons = filters.map(function (row) {
            return row.map(function (button) {
                var shortButton = GenericMenu.remapFullToCompact({
                    action: _this.genericConfig.action,
                    value: button.value,
                    isDefault: button.isDefault,
                });
                return telegraf_1.Markup.button.callback(_this.formatButtonLabel(ctx, button), JSON.stringify(shortButton));
            });
        });
        if (this.genericConfig.onSubmit || this.genericConfig.submitMessage || this.genericConfig.onSubmitUpdater) {
            var shortButton = GenericMenu.remapFullToCompact({
                action: this.genericConfig.action,
                value: '_local_submit',
            });
            var callbackButton = telegraf_1.Markup.button.callback(this.getSubmitMessage(ctx), JSON.stringify(shortButton));
            buttons.push([callbackButton]);
        }
        return telegraf_1.Markup.inlineKeyboard(buttons);
    };
    return GenericMenu;
}());
exports.GenericMenu = GenericMenu;
//# sourceMappingURL=generic-menu.js.map