"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toMarkdownV2 = exports.toHTML = exports.serialiseWith = exports.escapers = exports.serialisers = void 0;
const serialisers = __importStar(require("./serialisers.js"));
exports.serialisers = serialisers;
const escapers = __importStar(require("./escapers.js"));
exports.escapers = escapers;
const filterFromIndex = (xs, index, when) => {
    let i = index;
    const ret = Array();
    while (i < xs.length && when(xs[i], i))
        ret.push(xs[i]), i++;
    return ret;
};
const serialiseWith = (serialiser) => (message) => {
    const msg = "text" in message ? message : { text: message.caption || "", entities: message.caption_entities };
    if (!msg.entities || msg.entities.length === 0)
        return serialiser(msg.text);
    const text = msg.text;
    let ret = "";
    let index = 0;
    const entities = msg.entities.sort((a, b) => a.offset - b.offset);
    for (let i = 0; i < entities.length; i++) {
        const entity = entities[i];
        // slice plaintext before current entity
        const before = text.slice(index, entity.offset);
        ret += serialiser(before);
        const ends = entity.offset + entity.length;
        const inside = filterFromIndex(entities, i + 1, entity => entity.offset < ends)
            // reduce offset to match the new text we're going to send
            .map(each => ((each.offset -= entity.offset), each));
        const match = text.slice(entity.offset, ends);
        const serialisedMatch = serialiseWith(serialiser)({ text: match, entities: inside });
        ret += serialiser(serialisedMatch, entity, !Boolean(inside.length));
        index = ends;
        i += inside.length;
    }
    // slice plaintext after last entity
    const after = text.slice(index);
    ret += serialiser(after);
    return ret;
};
exports.serialiseWith = serialiseWith;
const toHTML = serialiseWith(serialisers.HTML);
exports.toHTML = toHTML;
const toMarkdownV2 = serialiseWith(serialisers.MarkdownV2);
exports.toMarkdownV2 = toMarkdownV2;
