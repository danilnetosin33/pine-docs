"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarkdownV2 = exports.HTML = void 0;
const escapers = __importStar(require("./escapers.js"));
function HTML(match, entity, escape = true) {
    match = escape ? escapers.HTML(match) : match;
    switch (entity?.type) {
        case "bold":
            return `<b>${match}</b>`;
        case "italic":
            return `<i>${match}</i>`;
        case "underline":
            return `<u>${match}</u>`;
        case "strikethrough":
            return `<del>${match}</del>`;
        case "code":
            return `<code>${match}</code>`;
        case "pre":
            if (entity.language)
                return `<pre><code class="language-${entity.language}">${match}</code></pre>`;
            return `<pre>${match}</pre>`;
        case "spoiler":
            return `<span class="tg-spoiler">${match}</span>`;
        case "url":
            return `<a href="${match}">${match}</a>`;
        case "text_link":
            return `<a href="${entity.url}">${match}</a>`;
        case "text_mention":
            return `<a href="tg://user?id=${entity.user.id}">${match}</a>`;
        case "mention":
        case "custom_emoji":
        case "hashtag":
        case "cashtag":
        case "bot_command":
        case "phone_number":
        case "email":
        default:
            return match;
    }
}
exports.HTML = HTML;
function MarkdownV2(match, entity, escape = true) {
    match = escape ? escapers.MarkdownV2(match) : match;
    switch (entity?.type) {
        case "bold":
            return `*${match}*`;
        case "italic":
            return `_${match}_`;
        case "underline":
            return `__${match}__`;
        case "strikethrough":
            return `~${match}~`;
        case "code":
            return `\`${match}\``;
        case "pre":
            if (entity.language)
                return "```" + entity.language + "\n" + match + "\n```";
            return "```\n" + match + "\n```";
        case "spoiler":
            return `||${match}||`;
        case "url":
            return match;
        case "text_link":
            return `[${match}](${entity.url})`;
        case "text_mention":
            return `[${match}](tg://user?id=${entity.user.id})`;
        case "mention":
        case "custom_emoji":
        case "hashtag":
        case "cashtag":
        case "bot_command":
        case "phone_number":
        case "email":
        default:
            return match;
    }
}
exports.MarkdownV2 = MarkdownV2;
